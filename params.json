{"name":"Omega","tagline":"A web application framework for realtime applications.","body":"# Omega Web Framework\r\n\r\nA web application framework that is designed to support realtime web applications simply and effectively. It takes a\r\n'batteries included, but optional' approach; it comes with a template language, database support, and an extensible\r\nauthentication system, but you are not required to use any of that. It also provides a\r\n[django](https://www.djangoproject.com/)-like admin section that, when coupled with the built in database support,\r\nalows you to inspect, modify, and create instances of your models. ( _Note: this feature is very new, and very\r\nexperimental; it is not recommended to use in production._ )\r\n\r\n## Basic App\r\n\r\nA basic omega application looks like this:\r\n\r\n```javascript\r\nvar path = require('path');\r\nvar app = require('omega-wf').app;\r\n\r\napp.router.add({url: '/static/*', path: path.join(__dirname, 'static')});\r\n\r\n// Start the omega app.\r\napp.listen();\r\n\r\n```\r\n\r\nThis tells omega to serve the `./static` folder statically at the url `/static/*`, and then starts listening for incomming\r\nconnections. Admitedly, this isn't the most exciting application in the world, but it illustrates the basics of omega;\r\nfirst and foremost: _omega is simple_. It tries to make whatever you're doing as straightforward as possible, and hide\r\nany complexity from you.\r\n\r\nSecond, this demonstrates a core concept of working with omega: _the app is king_. omega plication object provides\r\nan api into omega's functionality. Really, this should be intuitive for most people, but it's worth repeating.\r\n\r\n## Static File Serving\r\n\r\nThe basic example also included a basic example of static file serving. Omega supports as many static files as you would\r\nlike, and handled directories, as well as individual files. To exand on the first example, we can also pass a list of\r\ndirectories to serve:\r\n\r\n```javascript\r\nvar path = require('path');\r\nvar app = require('omega-wf').app;\r\n\r\napp.router.add(\r\n    {\r\n        url: '/static/*',\r\n        path: path.join(__dirname, 'static')\r\n    },\r\n    {\r\n        url: '/images/*',\r\n        path: '/usr/share/images'\r\n    },\r\n    {\r\n        url: '/uploads/*',\r\n        path: '/tmp/uploads',\r\n        options: {\r\n            autoIndex: false\r\n        }\r\n);\r\n\r\n```\r\n\r\nThe big difference between serving a static file, and serving a normal url route, is that omega looks for the `path` key\r\nand assumes that anything with `path` is a static file. As `path` is not a HTTP verb, I feel this is safe.\r\n\r\n### Options\r\n\r\nCurrently, the only option supported is `autoIndex`. If true, and the path requested is a directory, omega looks for an\r\n`index.html` file, and serves that, instead.\r\n\r\n### Security/Performance\r\n\r\nUnder the hood omega uses it's own custom static file router, which supports streaming. While the intention is for it to\r\nbe usable in production, a dedicated static file server, like [nginx](http://wiki.nginx.org/Main) will always be faster,\r\nand more secure.\r\n\r\n## URL Routing\r\n\r\nEven though the focus of omega is on realtime web applications, there are reasons you may wish to do things a more\r\ntraditional way, with server-side processing. Or, perhaps, you need to write a simple `REST` service. That's easily done\r\nwith omega:\r\n\r\n```javascript\r\n\r\nvar app = require('omega-wf').app;\r\nvar controllers = require('./controllers');\r\n\r\napp.router.add({url: '/', get: controllers.index});\r\n\r\n```\r\n\r\nIt also supports adding multiple paths, with multiple verbs at once:\r\n\r\n```javascript\r\n\r\nvar app = require('omega-wf').app;\r\nvar controllers = require('./controllers');\r\n\r\napp.router.add(\r\n    {\r\n        url: '/',\r\n        get: controllers.index\r\n    },\r\n    {\r\n        path: '/blog',\r\n        get: controllers.blog_index,\r\n        post: controllers.blog_new\r\n    }\r\n);\r\n\r\n```\r\n\r\nThe `url` parameter can be a regular expression, supporting capture groups:\r\n\r\n```javascript\r\napp.router.add({url: '/blog/{slug}', get: controllers.blog});\r\n```\r\n\r\nIn the `controllers.blog` function, you can get the url parameter like this:\r\n\r\n```javascript\r\nfunction(request, response) {\r\n    var slug = request.params.slug;\r\n\r\n    // Your code here\r\n    response.end();\r\n}\r\n```\r\n\r\nThis is all simply a wrapper around [gett/router](https://github.com/gett/router), with a bit of syntactic sugar. All\r\nHTTP verbs supported there are supported by omega.\r\n\r\n## Socket.io\r\n\r\nOne of the big things omega provides is `socket.io` functionality. We expose this in a very straightforward way:\r\n\r\n```javascript\r\nvar app = require('omega-wf').app;\r\n\r\napp.sockets.on('connection', function(socket) {\r\n    socket.emit('news', { hello: 'world' });\r\n    socket.on('my other event', function (data) {\r\n        console.log(data);\r\n    });\r\n});\r\n```\r\n\r\nSince `socket.io` has a great, easy to understand api, we don't even bother to wrap it; we just take care of starting\r\nthe server for you. (We don't expose the `io` object directly, as there's hardly any need. Should you need to use it,\r\nyou can access it via `app._io`.)\r\n\r\n### Namespaces\r\n\r\nWe also expose socket.io's namespaces as `channels`:\r\n\r\n```javascript\r\nvar app = require('omega-wf').app;\r\n\r\napp.channels('/news').on('connection', function (socket) {\r\n    socket.emit('item', { news: 'item' });\r\n});\r\n```\r\n\r\nThis makes is nice and straightforward to write `socket.io` code however you wish.\r\n\r\n## Authentication\r\n\r\nOmega has integration with [Passport]() for authentication. This can be accessed through `require('omega-wf').auth`.\r\n( _Note: This is one of the few pieces not wrapped in the omega app. This is because auth is considered optional._ )\r\n\r\nExample to come soon.\r\n\r\n## Databases\r\n\r\nOmega has integration with [Sequelize]() for database connectivity. This can be accessed through `require('omega-wf').db`.\r\n( _Note: This is one of the few pieces not wrapped in the omega app. This is because it is considered optional._ )\r\n\r\nIt should be noted that you are still free to use any ORM you wish; we just provide one for you incase you don't want to\r\nintegrate it yourself, and you like working with SQL. (`sqlite` is still the defacto development database in most\r\ninstances, which is why omega still defaults to sql over nosql solutions.)\r\n\r\nExample to come soon.\r\n\r\n## Admin Section\r\n\r\nOmega now has an admin section, which can be enabled by simple uncommenting the following lines from the settings file:\r\n\r\n```javascript\r\nomegaAdminUrl = '/admin';\r\nuseOmegaAdmin = true;\r\n```\r\n\r\nAs you can see, `omegaAdminUrl` allows you to control what url the admin section (and all it's associated static files,\r\nREST interface, etc) is served at. This is simply to give you greater flexibility.\r\n\r\nThe admin section gives a very basic interface into your database, allowing you to easily create model instances, or\r\nmodify values in the database.\r\n\r\n**Note:** Currently, the admin section has zero integration with the authentication system, and it gives complete access\r\nto your database, so _**do not**_ enable it on a production site!\r\n\r\n## Initialization\r\n\r\nSometimes, you need to do some initialization that depends on the omega app having finished it's setup. For these cases,\r\nomega provides `app.init`:\r\n\r\n```javascript\r\nvar app = require('omega-wf').app;\r\n\r\napp.init(function() {\r\n    // It is safe to work with app.config here.\r\n});\r\n\r\n// It is not safe to work with app.config here.\r\n\r\n```\r\n\r\nThis is very useful if you want to split your app into several modules, some of which depend on configuration.\r\n\r\n## App Name\r\n\r\nIt's possible to set the name of your application:\r\n\r\n```javascript\r\nvar app = require('omega-wf').app;\r\n\r\napp.setName(\"Some Really Cool App v2.0.1.adf23019w-pre7\");\r\n```\r\n\r\nThis is useful for logging, mostly. (But it might get used later. Suggestions welcome!)\r\n\r\n## Unit Tests\r\n\r\nTests can be run with:\r\n\r\n```bash\r\n$ npm tests\r\n```\r\n\r\n## Installation\r\n\r\nSimply install globally from npm:\r\n\r\n```bash\r\n$ npm install -g omega-wf\r\n```\r\n\r\nThis will get you the `omega-admin` script, with which you can start a new app:\r\n\r\n```bash\r\n$ omega-admin startapp my_app\r\n```\r\n\r\n(You can also install it locally, but then you won't get the omega admin script.)\r\n\r\n## Work in Progress\r\n\r\nThis is a massive work in progress. Currently, I'm gearing up for a 1.0 release. The API is mostly stable, and I'm using\r\nit to develop some projects. As I find issues, I am documenting them with github issues, and then fixing them, so the\r\nissues list is a good idea of what doesn't work.\r\n\r\nAt the moment, I would call it \"beta quality\", and wouldn't run it in production without doing some extensive testing. If,\r\nhowever, you are a brave soul, and are using it in production, let me know! The more feedback, the better.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}